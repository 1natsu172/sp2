/* eslint-env mocha */

import { $bind } from "@sp2/format";
import { $update } from "../src/bound-updater";
import assert from "assert";

describe("$update() can immutably update objects using", () => {
  describe("$set operator,", () => {
    it("can accept operations generated by $bind() function", () => {
      const obj = { name: { first: "Shin", last: "Doe" } };

      type Person = { name: { first: string; last: string }; age: number };
      const { $set, $docPath, $merge } = $bind<Person>();
      const operation = $merge(
        $set($docPath("name", "first"), "John"),
        $set($docPath("age"), 32)
      );

      const updatedObject = $update(obj, operation);
      assert.deepStrictEqual(updatedObject, {
        name: { first: "John", last: "Doe" },
        age: 32,
      });
    });
  });

  describe("$inc operator,", () => {
    it("can accept operations generated by $bind() function", () => {
      const obj = { visited: { type: "house", count: 32 } };

      type Data = { visited: { type: string; count: number } };
      const { $inc, $docPath } = $bind<Data>();
      const operation = $inc($docPath("visited", "count"), 4);

      const updatedObject = $update(obj, operation);
      assert.deepStrictEqual(updatedObject, {
        visited: { type: "house", count: 36 },
      });
    });
  });

  describe("$min operator,", () => {
    it("can accept operations generated by $bind() function", () => {
      const obj = { physical: { height: 168.3 } };
      type Person = { physical: { height: number } };
      const { $min, $docPath } = $bind<Person>();
      const operation = $min($docPath("physical", "height"), 168.32);

      const updatedObject = $update(obj, operation);
      assert.deepStrictEqual(updatedObject, {
        physical: { height: 168.3 },
      });
    });

    it("can accept operations generated by $bind() function when prop is string", () => {
      const obj = { name: { first: "John" } };
      type Person = { name: { first: string } };
      const { $min, $docPath } = $bind<Person>();
      const operation = $min($docPath("name", "first"), "Shin");

      const updatedObject = $update(obj, operation);
      assert.deepStrictEqual(updatedObject, {
        name: { first: "John" },
      });
    });
  });

  describe("$max operator,", () => {
    it("can accept operations generated by $bind() function", () => {
      const obj = { physical: { height: 168.3 } };
      type Person = { physical: { height: number } };
      const { $max, $docPath } = $bind<Person>();
      const operation = $max($docPath("physical", "height"), 168.32);

      const updatedObject = $update(obj, operation);
      assert.deepStrictEqual(updatedObject, {
        physical: { height: 168.32 },
      });
    });

    it("can accept operations generated by $bind() function when prop is string", () => {
      const obj = { name: { first: "John" } };
      type Person = { name: { first: string } };
      const { $max, $docPath } = $bind<Person>();
      const operation = $max($docPath("name", "first"), "Shin");

      const updatedObject = $update(obj, operation);
      assert.deepStrictEqual(updatedObject, {
        name: { first: "Shin" },
      });
    });
  });

  describe("$mul operator,", () => {
    it("can accept operations generated by $bind() function", () => {
      const obj = { current: { rate: 1.3 } };

      type Data = { current: { rate: number } };
      const { $mul, $docPath } = $bind<Data>();
      const operation = $mul($docPath("current", "rate"), 0);

      const updatedObject = $update(obj, operation);
      assert.deepStrictEqual(updatedObject, {
        current: { rate: 0 },
      });
    });
  });

  describe("$addToSet operator,", () => {
    it("can accept operations generated by $bind() function", () => {
      const obj = { gameCompanies: { hardware: ["Sony", "Microsoft"] } };
      type Data = { gameCompanies: { hardware: string[] } };
      const { $addToSet, $docPath } = $bind<Data>();
      const operation = $addToSet(
        $docPath("gameCompanies", "hardware"),
        "Nintendo"
      );

      const updatedObject = $update(obj, operation);
      assert.deepStrictEqual(updatedObject, {
        gameCompanies: { hardware: ["Sony", "Microsoft", "Nintendo"] },
      });
    });

    it("can accept operations with multiple values", () => {
      const obj = { gameCompanies: { hardware: ["Sony", "Microsoft"] } };
      type Data = { gameCompanies: { hardware: string[] } };
      const { $addToSet, $docPath } = $bind<Data>();
      const operation = $addToSet($docPath("gameCompanies", "hardware"), {
        $each: ["Nintendo", "Sony", "SEGA"],
      });

      const updatedObject = $update(obj, operation);
      assert.deepStrictEqual(updatedObject, {
        gameCompanies: { hardware: ["Sony", "Microsoft", "Nintendo", "SEGA"] },
      });
    });
  });

  describe("$pop operator,", () => {
    it("can accept operations generated by $bind() function", () => {
      const obj = { gameCompanies: { hardware: ["Sony", "Microsoft"] } };
      type Data = { gameCompanies: { hardware: string[] } };
      const { $pop, $docPath } = $bind<Data>();
      const operation = $pop($docPath("gameCompanies", "hardware"), 1);
      const updatedObject = $update(obj, operation);
      assert.deepStrictEqual(updatedObject, {
        gameCompanies: {
          hardware: ["Sony"],
        },
      });
    });
  });

  describe("$pull operator,", () => {
    const obj = {
      langs: [
        { type: "LL", name: "JavaScript" },
        { type: "Compile", name: "Go" },
        { type: "Compile", name: "C++" },
        { type: "Compile", name: "Java" },
        { type: "LL", name: "python" },
        { type: "LL", name: "PHP" },
        { type: "LL", name: "Ruby" },
      ],
    };

    it("can accept operations generated by $bind() function", () => {
      type Lang = { type: "LL" | "Compile"; name: string };
      type Data = { langs: Lang[]; foo: any[] };
      const { $pull, $docPath } = $bind<Data>();
      const operation = $pull($docPath("langs"), { name: { $regex: /Java/ } });
      const updatedObject = $update(obj, operation);
      assert.deepStrictEqual(updatedObject, {
        langs: [
          { type: "Compile", name: "Go" },
          { type: "Compile", name: "C++" },
          { type: "LL", name: "python" },
          { type: "LL", name: "PHP" },
          { type: "LL", name: "Ruby" },
        ],
      });
    });
  });

  describe("$push operator,", () => {
    it("can accept operations generated by $bind() function", () => {
      const obj = { gameCompanies: { hardware: ["Sony", "Microsoft"] } };
      type Data = { gameCompanies: { hardware: string[] } };
      const { $push, $docPath } = $bind<Data>();
      const operation = $push(
        $docPath("gameCompanies", "hardware"),
        "Nintendo"
      );

      const updatedObject = $update(obj, operation);
      assert.deepStrictEqual(updatedObject, {
        gameCompanies: { hardware: ["Sony", "Microsoft", "Nintendo"] },
      });
    });

    it("can accept operations with multiple values", () => {
      const obj = { gameCompanies: { hardware: ["Sony", "Microsoft"] } };
      type Data = { gameCompanies: { hardware: string[] } };
      const { $push, $docPath } = $bind<Data>();
      const operation = $push($docPath("gameCompanies", "hardware"), {
        $each: ["Nintendo", "Sony", "SEGA"],
      });

      const updatedObject = $update(obj, operation);
      assert.deepStrictEqual(updatedObject, {
        gameCompanies: {
          hardware: ["Sony", "Microsoft", "Nintendo", "Sony", "SEGA"],
        },
      });
    });
  });

  describe("$currentDate operator,", () => {
    it("can accept operations generated by $bind() function", () => {
      const obj = { physical: { height: 168.3 } };
      type Person = { physical: { height: number; measuredAt: string } };
      const { $currentDate, $docPath } = $bind<Person>();
      const operation = $currentDate($docPath("physical", "measuredAt"), true);

      const updatedObject = $update(obj, operation);
      // @ts-ignore
      const measuredAt = updatedObject.physical.measuredAt;
      assert.deepStrictEqual(updatedObject, {
        physical: { height: 168.3, measuredAt: measuredAt },
      });
      assert(measuredAt instanceof Date);
    });
  });

  describe("$unset operator,", () => {
    it("can accept operations generated by $bind() function", () => {
      const obj = { physical: { height: 168.3 } };
      type Person = { physical: { height: number } };
      type PersonWithoutHeight = { physical: { height?: number } };
      const { $unset, $docPath } = $bind<Person>();
      const operation = $unset($docPath("physical", "height"), "");

      const updatedObject = $update<PersonWithoutHeight>(obj, operation);
      assert.deepStrictEqual(updatedObject, {
        physical: {},
      });
    });
  });
});
